A. This will not always yield 1: x = INT_MIN and y = 0.

B. This will always yeild 1, which we can observe by evaluating
the lhs of the expression:
(x+y)*16 + y - x
= 16*x - x + 16*y + y
= 17*y + 15*x
which is equal to the rhs, thus always yielding a 1.

C. This will always yield 1, because of 2's complement evaluation of LHS:
~x + ~y + 1
= -x + -y -1 -1 + 1  (Using ~A = -A - 1)
= -(x+y) -1
= ~(x+y)  (Using same rule)
which is equal to the rhs, thus always yielding a 1.

D. This will always yield 1, which can be observed after evaluating LHS:
ux - uy
= - (uy - ux)
= - ( (unsigned) y - (unsigned) x)
= - (unsigned) (y - x)  (because it doesn't matter whether we cast
to unsigned before or after subtraction, result is the same)
this is equal to the rhs, thus always yielding a 1.

E. This will always yield 1. By right shifting and then left shifting,
we can lose activated bits in case of positive x, thus resulting in 
a smaller positive number. If x is negative, this might result in a
more negative number, since number of activated bits might be more.
Hence, this will always yield 1. 

F. This will always yield 1.
If x is negative, then (ux & (-1<<31)) gives 2^32, else it gives 0.
If x is negative, then ux >> 1 gives (x + 2^32) / 2, else it gives x >> 1.
Hence, this will ALWAYS yield 1 if x is non negative.
If x is negative the entire RHS evaluates to (x + 2^32) / 2 + 2^32.

G. This will always yield 1. 
When we do x & 127, we deactivate all the bits, except the 7 least 
significant bits, thus preserving their value. Hence, the result we get
is simply x % 128.

